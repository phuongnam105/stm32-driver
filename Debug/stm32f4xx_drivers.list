
stm32f4xx_drivers.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000008e4  08000188  08000188  00001188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000000  08000a6c  08000a6c  00002018  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  3 .ARM.extab    00000000  08000a6c  08000a6c  00002018  2**0
                  CONTENTS
  4 .ARM          00000000  08000a6c  08000a6c  00002018  2**0
                  CONTENTS
  5 .preinit_array 00000000  08000a6c  08000a6c  00002018  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08000a6c  08000a6c  00001a6c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08000a70  08000a70  00001a70  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000018  20000000  08000a74  00002000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00002018  2**0
                  CONTENTS
 10 .bss          00000044  20000018  20000018  00002018  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  2000005c  2000005c  00002018  2**0
                  ALLOC
 12 .ARM.attributes 0000002a  00000000  00000000  00002018  2**0
                  CONTENTS, READONLY
 13 .debug_info   000018b7  00000000  00000000  00002042  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 0000067a  00000000  00000000  000038f9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000001d0  00000000  00000000  00003f78  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000152  00000000  00000000  00004148  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00002863  00000000  00000000  0000429a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0000243c  00000000  00000000  00006afd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    0000a47d  00000000  00000000  00008f39  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  000133b6  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00000688  00000000  00000000  000133fc  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 0000006d  00000000  00000000  00013a84  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	@ (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	@ (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	@ (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	20000018 	.word	0x20000018
 80001a4:	00000000 	.word	0x00000000
 80001a8:	08000a54 	.word	0x08000a54

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	@ (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	@ (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	@ (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	2000001c 	.word	0x2000001c
 80001c4:	08000a54 	.word	0x08000a54

080001c8 <GPIO_I2C_Init>:

I2C_Handle_t I2C1Handle;


void GPIO_I2C_Init(void)
{
 80001c8:	b580      	push	{r7, lr}
 80001ca:	b084      	sub	sp, #16
 80001cc:	af00      	add	r7, sp, #0
	GPIO_Handle_t I2CPin;

	I2CPin.pGPIOx = GPIOB;
 80001ce:	4b0e      	ldr	r3, [pc, #56]	@ (8000208 <GPIO_I2C_Init+0x40>)
 80001d0:	607b      	str	r3, [r7, #4]
	I2CPin.GPIO_PinConfig.GPIO_PinMode = GPIO_MODE_ALTFN;
 80001d2:	2302      	movs	r3, #2
 80001d4:	727b      	strb	r3, [r7, #9]
	I2CPin.GPIO_PinConfig.GPIO_PinOPType = GPIO_OP_TYPE_OD;
 80001d6:	2301      	movs	r3, #1
 80001d8:	733b      	strb	r3, [r7, #12]
	I2CPin.GPIO_PinConfig.GPIO_PinPuPdControl = GPIO_PIN_PU;
 80001da:	2301      	movs	r3, #1
 80001dc:	72fb      	strb	r3, [r7, #11]
	I2CPin.GPIO_PinConfig.GPIO_PinSpeed = GPIO_SPEED_FAST;
 80001de:	2302      	movs	r3, #2
 80001e0:	72bb      	strb	r3, [r7, #10]
	I2CPin.GPIO_PinConfig.GPIO_PinAltFunMode = 4;
 80001e2:	2304      	movs	r3, #4
 80001e4:	737b      	strb	r3, [r7, #13]

	//SDA
	I2CPin.GPIO_PinConfig.GPIO_PinNumber = GPIO_PIN_NO_7;
 80001e6:	2307      	movs	r3, #7
 80001e8:	723b      	strb	r3, [r7, #8]
	GPIO_Init(&I2CPin);
 80001ea:	1d3b      	adds	r3, r7, #4
 80001ec:	4618      	mov	r0, r3
 80001ee:	f000 f8eb 	bl	80003c8 <GPIO_Init>

	//SCL
	I2CPin.GPIO_PinConfig.GPIO_PinNumber = GPIO_PIN_NO_6;
 80001f2:	2306      	movs	r3, #6
 80001f4:	723b      	strb	r3, [r7, #8]
	GPIO_Init(&I2CPin);
 80001f6:	1d3b      	adds	r3, r7, #4
 80001f8:	4618      	mov	r0, r3
 80001fa:	f000 f8e5 	bl	80003c8 <GPIO_Init>
}
 80001fe:	bf00      	nop
 8000200:	3710      	adds	r7, #16
 8000202:	46bd      	mov	sp, r7
 8000204:	bd80      	pop	{r7, pc}
 8000206:	bf00      	nop
 8000208:	80040400 	.word	0x80040400

0800020c <I2C1_Inits>:

void I2C1_Inits(void)
{
 800020c:	b580      	push	{r7, lr}
 800020e:	af00      	add	r7, sp, #0
	I2C1Handle.pI2Cx = I2C1;
 8000210:	4b09      	ldr	r3, [pc, #36]	@ (8000238 <I2C1_Inits+0x2c>)
 8000212:	4a0a      	ldr	r2, [pc, #40]	@ (800023c <I2C1_Inits+0x30>)
 8000214:	601a      	str	r2, [r3, #0]
	I2C1Handle.I2C_Config.I2C_ACKControl = I2C_ACK_ENABLE;
 8000216:	4b08      	ldr	r3, [pc, #32]	@ (8000238 <I2C1_Inits+0x2c>)
 8000218:	2201      	movs	r2, #1
 800021a:	725a      	strb	r2, [r3, #9]
	I2C1Handle.I2C_Config.I2C_DeviceAddress =	MY_ADDR;
 800021c:	4b06      	ldr	r3, [pc, #24]	@ (8000238 <I2C1_Inits+0x2c>)
 800021e:	2261      	movs	r2, #97	@ 0x61
 8000220:	721a      	strb	r2, [r3, #8]
	I2C1Handle.I2C_Config.I2C_SCLSpeed = I2C_SCL_SPEED_SM;
 8000222:	4b05      	ldr	r3, [pc, #20]	@ (8000238 <I2C1_Inits+0x2c>)
 8000224:	4a06      	ldr	r2, [pc, #24]	@ (8000240 <I2C1_Inits+0x34>)
 8000226:	605a      	str	r2, [r3, #4]
	I2C1Handle.I2C_Config.I2C_FMDutyCycle = I2C_FM_DUTY_2;
 8000228:	4b03      	ldr	r3, [pc, #12]	@ (8000238 <I2C1_Inits+0x2c>)
 800022a:	2200      	movs	r2, #0
 800022c:	729a      	strb	r2, [r3, #10]

	I2C_Init(&I2C1Handle);
 800022e:	4802      	ldr	r0, [pc, #8]	@ (8000238 <I2C1_Inits+0x2c>)
 8000230:	f000 fae0 	bl	80007f4 <I2C_Init>
}
 8000234:	bf00      	nop
 8000236:	bd80      	pop	{r7, pc}
 8000238:	20000034 	.word	0x20000034
 800023c:	80005400 	.word	0x80005400
 8000240:	000186a0 	.word	0x000186a0

08000244 <main>:

int main(void)
{
 8000244:	b580      	push	{r7, lr}
 8000246:	af00      	add	r7, sp, #0
	GPIO_I2C_Init();
 8000248:	f7ff ffbe 	bl	80001c8 <GPIO_I2C_Init>
	I2C1_Inits();
 800024c:	f7ff ffde 	bl	800020c <I2C1_Inits>

	I2C_PeripheralControl(I2C1, ENABLE);
 8000250:	2101      	movs	r1, #1
 8000252:	4805      	ldr	r0, [pc, #20]	@ (8000268 <main+0x24>)
 8000254:	f000 fab2 	bl	80007bc <I2C_PeripheralControl>

	I2C_ManageAcking(I2C1, ENABLE);
 8000258:	2101      	movs	r1, #1
 800025a:	4803      	ldr	r0, [pc, #12]	@ (8000268 <main+0x24>)
 800025c:	f000 fb5c 	bl	8000918 <I2C_ManageAcking>
 8000260:	2300      	movs	r3, #0
}
 8000262:	4618      	mov	r0, r3
 8000264:	bd80      	pop	{r7, pc}
 8000266:	bf00      	nop
 8000268:	80005400 	.word	0x80005400

0800026c <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 800026c:	480d      	ldr	r0, [pc, #52]	@ (80002a4 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 800026e:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 8000270:	f3af 8000 	nop.w

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000274:	480c      	ldr	r0, [pc, #48]	@ (80002a8 <LoopForever+0x6>)
  ldr r1, =_edata
 8000276:	490d      	ldr	r1, [pc, #52]	@ (80002ac <LoopForever+0xa>)
  ldr r2, =_sidata
 8000278:	4a0d      	ldr	r2, [pc, #52]	@ (80002b0 <LoopForever+0xe>)
  movs r3, #0
 800027a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800027c:	e002      	b.n	8000284 <LoopCopyDataInit>

0800027e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800027e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000280:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000282:	3304      	adds	r3, #4

08000284 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000284:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000286:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000288:	d3f9      	bcc.n	800027e <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800028a:	4a0a      	ldr	r2, [pc, #40]	@ (80002b4 <LoopForever+0x12>)
  ldr r4, =_ebss
 800028c:	4c0a      	ldr	r4, [pc, #40]	@ (80002b8 <LoopForever+0x16>)
  movs r3, #0
 800028e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000290:	e001      	b.n	8000296 <LoopFillZerobss>

08000292 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000292:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000294:	3204      	adds	r2, #4

08000296 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000296:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000298:	d3fb      	bcc.n	8000292 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 800029a:	f000 fbb7 	bl	8000a0c <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800029e:	f7ff ffd1 	bl	8000244 <main>

080002a2 <LoopForever>:

LoopForever:
  b LoopForever
 80002a2:	e7fe      	b.n	80002a2 <LoopForever>
  ldr   r0, =_estack
 80002a4:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 80002a8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80002ac:	20000018 	.word	0x20000018
  ldr r2, =_sidata
 80002b0:	08000a74 	.word	0x08000a74
  ldr r2, =_sbss
 80002b4:	20000018 	.word	0x20000018
  ldr r4, =_ebss
 80002b8:	2000005c 	.word	0x2000005c

080002bc <ADC_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80002bc:	e7fe      	b.n	80002bc <ADC_IRQHandler>
	...

080002c0 <GPIO_PeriClockControl>:
 *
 * @Note              -  none

 */
void GPIO_PeriClockControl(GPIO_RegDef_t *pGPIOx, uint8_t EnorDi)
{
 80002c0:	b480      	push	{r7}
 80002c2:	b083      	sub	sp, #12
 80002c4:	af00      	add	r7, sp, #0
 80002c6:	6078      	str	r0, [r7, #4]
 80002c8:	460b      	mov	r3, r1
 80002ca:	70fb      	strb	r3, [r7, #3]
	if(EnorDi == ENABLE)
 80002cc:	78fb      	ldrb	r3, [r7, #3]
 80002ce:	2b01      	cmp	r3, #1
 80002d0:	d161      	bne.n	8000396 <GPIO_PeriClockControl+0xd6>
	{
		if(pGPIOx == GPIOA)
 80002d2:	687b      	ldr	r3, [r7, #4]
 80002d4:	4a32      	ldr	r2, [pc, #200]	@ (80003a0 <GPIO_PeriClockControl+0xe0>)
 80002d6:	4293      	cmp	r3, r2
 80002d8:	d106      	bne.n	80002e8 <GPIO_PeriClockControl+0x28>
		{
			GPIOA_PCLK_EN();
 80002da:	4b32      	ldr	r3, [pc, #200]	@ (80003a4 <GPIO_PeriClockControl+0xe4>)
 80002dc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80002de:	4a31      	ldr	r2, [pc, #196]	@ (80003a4 <GPIO_PeriClockControl+0xe4>)
 80002e0:	f043 0301 	orr.w	r3, r3, #1
 80002e4:	6313      	str	r3, [r2, #48]	@ 0x30
	else
	{
		//TODO
	}

}
 80002e6:	e056      	b.n	8000396 <GPIO_PeriClockControl+0xd6>
		}else if (pGPIOx == GPIOB)
 80002e8:	687b      	ldr	r3, [r7, #4]
 80002ea:	4a2f      	ldr	r2, [pc, #188]	@ (80003a8 <GPIO_PeriClockControl+0xe8>)
 80002ec:	4293      	cmp	r3, r2
 80002ee:	d106      	bne.n	80002fe <GPIO_PeriClockControl+0x3e>
			GPIOB_PCLK_EN();
 80002f0:	4b2c      	ldr	r3, [pc, #176]	@ (80003a4 <GPIO_PeriClockControl+0xe4>)
 80002f2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80002f4:	4a2b      	ldr	r2, [pc, #172]	@ (80003a4 <GPIO_PeriClockControl+0xe4>)
 80002f6:	f043 0302 	orr.w	r3, r3, #2
 80002fa:	6313      	str	r3, [r2, #48]	@ 0x30
}
 80002fc:	e04b      	b.n	8000396 <GPIO_PeriClockControl+0xd6>
		}else if (pGPIOx == GPIOC)
 80002fe:	687b      	ldr	r3, [r7, #4]
 8000300:	4a2a      	ldr	r2, [pc, #168]	@ (80003ac <GPIO_PeriClockControl+0xec>)
 8000302:	4293      	cmp	r3, r2
 8000304:	d106      	bne.n	8000314 <GPIO_PeriClockControl+0x54>
			GPIOC_PCLK_EN();
 8000306:	4b27      	ldr	r3, [pc, #156]	@ (80003a4 <GPIO_PeriClockControl+0xe4>)
 8000308:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800030a:	4a26      	ldr	r2, [pc, #152]	@ (80003a4 <GPIO_PeriClockControl+0xe4>)
 800030c:	f043 0304 	orr.w	r3, r3, #4
 8000310:	6313      	str	r3, [r2, #48]	@ 0x30
}
 8000312:	e040      	b.n	8000396 <GPIO_PeriClockControl+0xd6>
		}else if (pGPIOx == GPIOD)
 8000314:	687b      	ldr	r3, [r7, #4]
 8000316:	4a26      	ldr	r2, [pc, #152]	@ (80003b0 <GPIO_PeriClockControl+0xf0>)
 8000318:	4293      	cmp	r3, r2
 800031a:	d106      	bne.n	800032a <GPIO_PeriClockControl+0x6a>
			GPIOD_PCLK_EN();
 800031c:	4b21      	ldr	r3, [pc, #132]	@ (80003a4 <GPIO_PeriClockControl+0xe4>)
 800031e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000320:	4a20      	ldr	r2, [pc, #128]	@ (80003a4 <GPIO_PeriClockControl+0xe4>)
 8000322:	f043 0308 	orr.w	r3, r3, #8
 8000326:	6313      	str	r3, [r2, #48]	@ 0x30
}
 8000328:	e035      	b.n	8000396 <GPIO_PeriClockControl+0xd6>
		}else if (pGPIOx == GPIOE)
 800032a:	687b      	ldr	r3, [r7, #4]
 800032c:	4a21      	ldr	r2, [pc, #132]	@ (80003b4 <GPIO_PeriClockControl+0xf4>)
 800032e:	4293      	cmp	r3, r2
 8000330:	d106      	bne.n	8000340 <GPIO_PeriClockControl+0x80>
			GPIOE_PCLK_EN();
 8000332:	4b1c      	ldr	r3, [pc, #112]	@ (80003a4 <GPIO_PeriClockControl+0xe4>)
 8000334:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000336:	4a1b      	ldr	r2, [pc, #108]	@ (80003a4 <GPIO_PeriClockControl+0xe4>)
 8000338:	f043 0310 	orr.w	r3, r3, #16
 800033c:	6313      	str	r3, [r2, #48]	@ 0x30
}
 800033e:	e02a      	b.n	8000396 <GPIO_PeriClockControl+0xd6>
		}else if (pGPIOx == GPIOF)
 8000340:	687b      	ldr	r3, [r7, #4]
 8000342:	4a1d      	ldr	r2, [pc, #116]	@ (80003b8 <GPIO_PeriClockControl+0xf8>)
 8000344:	4293      	cmp	r3, r2
 8000346:	d106      	bne.n	8000356 <GPIO_PeriClockControl+0x96>
			GPIOF_PCLK_EN();
 8000348:	4b16      	ldr	r3, [pc, #88]	@ (80003a4 <GPIO_PeriClockControl+0xe4>)
 800034a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800034c:	4a15      	ldr	r2, [pc, #84]	@ (80003a4 <GPIO_PeriClockControl+0xe4>)
 800034e:	f043 0320 	orr.w	r3, r3, #32
 8000352:	6313      	str	r3, [r2, #48]	@ 0x30
}
 8000354:	e01f      	b.n	8000396 <GPIO_PeriClockControl+0xd6>
		}else if (pGPIOx == GPIOG)
 8000356:	687b      	ldr	r3, [r7, #4]
 8000358:	4a18      	ldr	r2, [pc, #96]	@ (80003bc <GPIO_PeriClockControl+0xfc>)
 800035a:	4293      	cmp	r3, r2
 800035c:	d106      	bne.n	800036c <GPIO_PeriClockControl+0xac>
			GPIOG_PCLK_EN();
 800035e:	4b11      	ldr	r3, [pc, #68]	@ (80003a4 <GPIO_PeriClockControl+0xe4>)
 8000360:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000362:	4a10      	ldr	r2, [pc, #64]	@ (80003a4 <GPIO_PeriClockControl+0xe4>)
 8000364:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8000368:	6313      	str	r3, [r2, #48]	@ 0x30
}
 800036a:	e014      	b.n	8000396 <GPIO_PeriClockControl+0xd6>
		}else if (pGPIOx == GPIOH)
 800036c:	687b      	ldr	r3, [r7, #4]
 800036e:	4a14      	ldr	r2, [pc, #80]	@ (80003c0 <GPIO_PeriClockControl+0x100>)
 8000370:	4293      	cmp	r3, r2
 8000372:	d106      	bne.n	8000382 <GPIO_PeriClockControl+0xc2>
			GPIOH_PCLK_EN();
 8000374:	4b0b      	ldr	r3, [pc, #44]	@ (80003a4 <GPIO_PeriClockControl+0xe4>)
 8000376:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000378:	4a0a      	ldr	r2, [pc, #40]	@ (80003a4 <GPIO_PeriClockControl+0xe4>)
 800037a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800037e:	6313      	str	r3, [r2, #48]	@ 0x30
}
 8000380:	e009      	b.n	8000396 <GPIO_PeriClockControl+0xd6>
		}else if (pGPIOx == GPIOI)
 8000382:	687b      	ldr	r3, [r7, #4]
 8000384:	4a0f      	ldr	r2, [pc, #60]	@ (80003c4 <GPIO_PeriClockControl+0x104>)
 8000386:	4293      	cmp	r3, r2
 8000388:	d105      	bne.n	8000396 <GPIO_PeriClockControl+0xd6>
			GPIOI_PCLK_EN();
 800038a:	4b06      	ldr	r3, [pc, #24]	@ (80003a4 <GPIO_PeriClockControl+0xe4>)
 800038c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800038e:	4a05      	ldr	r2, [pc, #20]	@ (80003a4 <GPIO_PeriClockControl+0xe4>)
 8000390:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8000394:	6313      	str	r3, [r2, #48]	@ 0x30
}
 8000396:	bf00      	nop
 8000398:	370c      	adds	r7, #12
 800039a:	46bd      	mov	sp, r7
 800039c:	bc80      	pop	{r7}
 800039e:	4770      	bx	lr
 80003a0:	80040000 	.word	0x80040000
 80003a4:	80043800 	.word	0x80043800
 80003a8:	80040400 	.word	0x80040400
 80003ac:	80040800 	.word	0x80040800
 80003b0:	80040c00 	.word	0x80040c00
 80003b4:	80041000 	.word	0x80041000
 80003b8:	80041400 	.word	0x80041400
 80003bc:	80041800 	.word	0x80041800
 80003c0:	80041c00 	.word	0x80041c00
 80003c4:	80042000 	.word	0x80042000

080003c8 <GPIO_Init>:
 *
 * @Note              -

 */
void GPIO_Init(GPIO_Handle_t *pGPIOHandle)
{
 80003c8:	b580      	push	{r7, lr}
 80003ca:	b086      	sub	sp, #24
 80003cc:	af00      	add	r7, sp, #0
 80003ce:	6078      	str	r0, [r7, #4]
	 uint32_t temp=0; //temp. register
 80003d0:	2300      	movs	r3, #0
 80003d2:	617b      	str	r3, [r7, #20]

	 //enable the peripheral clock

	 GPIO_PeriClockControl(pGPIOHandle->pGPIOx, ENABLE);
 80003d4:	687b      	ldr	r3, [r7, #4]
 80003d6:	681b      	ldr	r3, [r3, #0]
 80003d8:	2101      	movs	r1, #1
 80003da:	4618      	mov	r0, r3
 80003dc:	f7ff ff70 	bl	80002c0 <GPIO_PeriClockControl>

	//1 . configure the mode of gpio pin

	if(pGPIOHandle->GPIO_PinConfig.GPIO_PinMode <= GPIO_MODE_ANALOG)
 80003e0:	687b      	ldr	r3, [r7, #4]
 80003e2:	795b      	ldrb	r3, [r3, #5]
 80003e4:	2b03      	cmp	r3, #3
 80003e6:	d820      	bhi.n	800042a <GPIO_Init+0x62>
	{
		//the non interrupt mode
		temp = (pGPIOHandle->GPIO_PinConfig.GPIO_PinMode << (2 * pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber ) );
 80003e8:	687b      	ldr	r3, [r7, #4]
 80003ea:	795b      	ldrb	r3, [r3, #5]
 80003ec:	461a      	mov	r2, r3
 80003ee:	687b      	ldr	r3, [r7, #4]
 80003f0:	791b      	ldrb	r3, [r3, #4]
 80003f2:	005b      	lsls	r3, r3, #1
 80003f4:	fa02 f303 	lsl.w	r3, r2, r3
 80003f8:	617b      	str	r3, [r7, #20]
		pGPIOHandle->pGPIOx->MODER &= ~( 0x3 << (2 * pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber)); //clearing
 80003fa:	687b      	ldr	r3, [r7, #4]
 80003fc:	681b      	ldr	r3, [r3, #0]
 80003fe:	681a      	ldr	r2, [r3, #0]
 8000400:	687b      	ldr	r3, [r7, #4]
 8000402:	791b      	ldrb	r3, [r3, #4]
 8000404:	005b      	lsls	r3, r3, #1
 8000406:	2103      	movs	r1, #3
 8000408:	fa01 f303 	lsl.w	r3, r1, r3
 800040c:	43db      	mvns	r3, r3
 800040e:	4619      	mov	r1, r3
 8000410:	687b      	ldr	r3, [r7, #4]
 8000412:	681b      	ldr	r3, [r3, #0]
 8000414:	400a      	ands	r2, r1
 8000416:	601a      	str	r2, [r3, #0]
		pGPIOHandle->pGPIOx->MODER |= temp; //setting
 8000418:	687b      	ldr	r3, [r7, #4]
 800041a:	681b      	ldr	r3, [r3, #0]
 800041c:	6819      	ldr	r1, [r3, #0]
 800041e:	687b      	ldr	r3, [r7, #4]
 8000420:	681b      	ldr	r3, [r3, #0]
 8000422:	697a      	ldr	r2, [r7, #20]
 8000424:	430a      	orrs	r2, r1
 8000426:	601a      	str	r2, [r3, #0]
 8000428:	e0d1      	b.n	80005ce <GPIO_Init+0x206>

	}else
	{
		//this part will code later . ( interrupt mode)
		if(pGPIOHandle->GPIO_PinConfig.GPIO_PinMode == GPIO_MODE_IT_FT)
 800042a:	687b      	ldr	r3, [r7, #4]
 800042c:	795b      	ldrb	r3, [r3, #5]
 800042e:	2b04      	cmp	r3, #4
 8000430:	d117      	bne.n	8000462 <GPIO_Init+0x9a>
		{
			//1. configure the FTSR
			EXTI->FTSR |= ( 1 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 8000432:	4b46      	ldr	r3, [pc, #280]	@ (800054c <GPIO_Init+0x184>)
 8000434:	68db      	ldr	r3, [r3, #12]
 8000436:	687a      	ldr	r2, [r7, #4]
 8000438:	7912      	ldrb	r2, [r2, #4]
 800043a:	4611      	mov	r1, r2
 800043c:	2201      	movs	r2, #1
 800043e:	408a      	lsls	r2, r1
 8000440:	4611      	mov	r1, r2
 8000442:	4a42      	ldr	r2, [pc, #264]	@ (800054c <GPIO_Init+0x184>)
 8000444:	430b      	orrs	r3, r1
 8000446:	60d3      	str	r3, [r2, #12]
			// clear the corresponding RTSR
			EXTI->RTSR &= ~( 1 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 8000448:	4b40      	ldr	r3, [pc, #256]	@ (800054c <GPIO_Init+0x184>)
 800044a:	689b      	ldr	r3, [r3, #8]
 800044c:	687a      	ldr	r2, [r7, #4]
 800044e:	7912      	ldrb	r2, [r2, #4]
 8000450:	4611      	mov	r1, r2
 8000452:	2201      	movs	r2, #1
 8000454:	408a      	lsls	r2, r1
 8000456:	43d2      	mvns	r2, r2
 8000458:	4611      	mov	r1, r2
 800045a:	4a3c      	ldr	r2, [pc, #240]	@ (800054c <GPIO_Init+0x184>)
 800045c:	400b      	ands	r3, r1
 800045e:	6093      	str	r3, [r2, #8]
 8000460:	e035      	b.n	80004ce <GPIO_Init+0x106>

		}else if (pGPIOHandle->GPIO_PinConfig.GPIO_PinMode == GPIO_MODE_IT_RT)
 8000462:	687b      	ldr	r3, [r7, #4]
 8000464:	795b      	ldrb	r3, [r3, #5]
 8000466:	2b05      	cmp	r3, #5
 8000468:	d117      	bne.n	800049a <GPIO_Init+0xd2>
		{
			//1. configure the RTSR
			EXTI->RTSR |= ( 1 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 800046a:	4b38      	ldr	r3, [pc, #224]	@ (800054c <GPIO_Init+0x184>)
 800046c:	689b      	ldr	r3, [r3, #8]
 800046e:	687a      	ldr	r2, [r7, #4]
 8000470:	7912      	ldrb	r2, [r2, #4]
 8000472:	4611      	mov	r1, r2
 8000474:	2201      	movs	r2, #1
 8000476:	408a      	lsls	r2, r1
 8000478:	4611      	mov	r1, r2
 800047a:	4a34      	ldr	r2, [pc, #208]	@ (800054c <GPIO_Init+0x184>)
 800047c:	430b      	orrs	r3, r1
 800047e:	6093      	str	r3, [r2, #8]
			//clear the corresponding FTSR
			EXTI->FTSR &= ~( 1 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 8000480:	4b32      	ldr	r3, [pc, #200]	@ (800054c <GPIO_Init+0x184>)
 8000482:	68db      	ldr	r3, [r3, #12]
 8000484:	687a      	ldr	r2, [r7, #4]
 8000486:	7912      	ldrb	r2, [r2, #4]
 8000488:	4611      	mov	r1, r2
 800048a:	2201      	movs	r2, #1
 800048c:	408a      	lsls	r2, r1
 800048e:	43d2      	mvns	r2, r2
 8000490:	4611      	mov	r1, r2
 8000492:	4a2e      	ldr	r2, [pc, #184]	@ (800054c <GPIO_Init+0x184>)
 8000494:	400b      	ands	r3, r1
 8000496:	60d3      	str	r3, [r2, #12]
 8000498:	e019      	b.n	80004ce <GPIO_Init+0x106>

		}else if (pGPIOHandle->GPIO_PinConfig.GPIO_PinMode == GPIO_MODE_IT_RFT)
 800049a:	687b      	ldr	r3, [r7, #4]
 800049c:	795b      	ldrb	r3, [r3, #5]
 800049e:	2b06      	cmp	r3, #6
 80004a0:	d115      	bne.n	80004ce <GPIO_Init+0x106>
		{
			//1. configure both FTSR and RTSR
			EXTI->RTSR |= ( 1 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 80004a2:	4b2a      	ldr	r3, [pc, #168]	@ (800054c <GPIO_Init+0x184>)
 80004a4:	689b      	ldr	r3, [r3, #8]
 80004a6:	687a      	ldr	r2, [r7, #4]
 80004a8:	7912      	ldrb	r2, [r2, #4]
 80004aa:	4611      	mov	r1, r2
 80004ac:	2201      	movs	r2, #1
 80004ae:	408a      	lsls	r2, r1
 80004b0:	4611      	mov	r1, r2
 80004b2:	4a26      	ldr	r2, [pc, #152]	@ (800054c <GPIO_Init+0x184>)
 80004b4:	430b      	orrs	r3, r1
 80004b6:	6093      	str	r3, [r2, #8]
			EXTI->FTSR |= ( 1 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 80004b8:	4b24      	ldr	r3, [pc, #144]	@ (800054c <GPIO_Init+0x184>)
 80004ba:	68db      	ldr	r3, [r3, #12]
 80004bc:	687a      	ldr	r2, [r7, #4]
 80004be:	7912      	ldrb	r2, [r2, #4]
 80004c0:	4611      	mov	r1, r2
 80004c2:	2201      	movs	r2, #1
 80004c4:	408a      	lsls	r2, r1
 80004c6:	4611      	mov	r1, r2
 80004c8:	4a20      	ldr	r2, [pc, #128]	@ (800054c <GPIO_Init+0x184>)
 80004ca:	430b      	orrs	r3, r1
 80004cc:	60d3      	str	r3, [r2, #12]
		}

		//2. configure the GPIO port selection in SYSCFG_EXTICR
		uint8_t temp1;
		uint8_t temp2;
		uint8_t portcode = GPIO_BASEADDR_TO_CODE(pGPIOHandle->pGPIOx);
 80004ce:	687b      	ldr	r3, [r7, #4]
 80004d0:	681b      	ldr	r3, [r3, #0]
 80004d2:	4a1f      	ldr	r2, [pc, #124]	@ (8000550 <GPIO_Init+0x188>)
 80004d4:	4293      	cmp	r3, r2
 80004d6:	d04d      	beq.n	8000574 <GPIO_Init+0x1ac>
 80004d8:	687b      	ldr	r3, [r7, #4]
 80004da:	681b      	ldr	r3, [r3, #0]
 80004dc:	4a1d      	ldr	r2, [pc, #116]	@ (8000554 <GPIO_Init+0x18c>)
 80004de:	4293      	cmp	r3, r2
 80004e0:	d032      	beq.n	8000548 <GPIO_Init+0x180>
 80004e2:	687b      	ldr	r3, [r7, #4]
 80004e4:	681b      	ldr	r3, [r3, #0]
 80004e6:	4a1c      	ldr	r2, [pc, #112]	@ (8000558 <GPIO_Init+0x190>)
 80004e8:	4293      	cmp	r3, r2
 80004ea:	d02b      	beq.n	8000544 <GPIO_Init+0x17c>
 80004ec:	687b      	ldr	r3, [r7, #4]
 80004ee:	681b      	ldr	r3, [r3, #0]
 80004f0:	4a1a      	ldr	r2, [pc, #104]	@ (800055c <GPIO_Init+0x194>)
 80004f2:	4293      	cmp	r3, r2
 80004f4:	d024      	beq.n	8000540 <GPIO_Init+0x178>
 80004f6:	687b      	ldr	r3, [r7, #4]
 80004f8:	681b      	ldr	r3, [r3, #0]
 80004fa:	4a19      	ldr	r2, [pc, #100]	@ (8000560 <GPIO_Init+0x198>)
 80004fc:	4293      	cmp	r3, r2
 80004fe:	d01d      	beq.n	800053c <GPIO_Init+0x174>
 8000500:	687b      	ldr	r3, [r7, #4]
 8000502:	681b      	ldr	r3, [r3, #0]
 8000504:	4a17      	ldr	r2, [pc, #92]	@ (8000564 <GPIO_Init+0x19c>)
 8000506:	4293      	cmp	r3, r2
 8000508:	d016      	beq.n	8000538 <GPIO_Init+0x170>
 800050a:	687b      	ldr	r3, [r7, #4]
 800050c:	681b      	ldr	r3, [r3, #0]
 800050e:	4a16      	ldr	r2, [pc, #88]	@ (8000568 <GPIO_Init+0x1a0>)
 8000510:	4293      	cmp	r3, r2
 8000512:	d00f      	beq.n	8000534 <GPIO_Init+0x16c>
 8000514:	687b      	ldr	r3, [r7, #4]
 8000516:	681b      	ldr	r3, [r3, #0]
 8000518:	4a14      	ldr	r2, [pc, #80]	@ (800056c <GPIO_Init+0x1a4>)
 800051a:	4293      	cmp	r3, r2
 800051c:	d008      	beq.n	8000530 <GPIO_Init+0x168>
 800051e:	687b      	ldr	r3, [r7, #4]
 8000520:	681b      	ldr	r3, [r3, #0]
 8000522:	4a13      	ldr	r2, [pc, #76]	@ (8000570 <GPIO_Init+0x1a8>)
 8000524:	4293      	cmp	r3, r2
 8000526:	d101      	bne.n	800052c <GPIO_Init+0x164>
 8000528:	2308      	movs	r3, #8
 800052a:	e024      	b.n	8000576 <GPIO_Init+0x1ae>
 800052c:	2300      	movs	r3, #0
 800052e:	e022      	b.n	8000576 <GPIO_Init+0x1ae>
 8000530:	2307      	movs	r3, #7
 8000532:	e020      	b.n	8000576 <GPIO_Init+0x1ae>
 8000534:	2306      	movs	r3, #6
 8000536:	e01e      	b.n	8000576 <GPIO_Init+0x1ae>
 8000538:	2305      	movs	r3, #5
 800053a:	e01c      	b.n	8000576 <GPIO_Init+0x1ae>
 800053c:	2304      	movs	r3, #4
 800053e:	e01a      	b.n	8000576 <GPIO_Init+0x1ae>
 8000540:	2303      	movs	r3, #3
 8000542:	e018      	b.n	8000576 <GPIO_Init+0x1ae>
 8000544:	2302      	movs	r3, #2
 8000546:	e016      	b.n	8000576 <GPIO_Init+0x1ae>
 8000548:	2301      	movs	r3, #1
 800054a:	e014      	b.n	8000576 <GPIO_Init+0x1ae>
 800054c:	80023c00 	.word	0x80023c00
 8000550:	80040000 	.word	0x80040000
 8000554:	80040400 	.word	0x80040400
 8000558:	80040800 	.word	0x80040800
 800055c:	80040c00 	.word	0x80040c00
 8000560:	80041000 	.word	0x80041000
 8000564:	80041400 	.word	0x80041400
 8000568:	80041800 	.word	0x80041800
 800056c:	80041c00 	.word	0x80041c00
 8000570:	80042000 	.word	0x80042000
 8000574:	2300      	movs	r3, #0
 8000576:	74fb      	strb	r3, [r7, #19]
		temp1 = pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber / 4;
 8000578:	687b      	ldr	r3, [r7, #4]
 800057a:	791b      	ldrb	r3, [r3, #4]
 800057c:	089b      	lsrs	r3, r3, #2
 800057e:	74bb      	strb	r3, [r7, #18]
		temp2 = pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber % 4;
 8000580:	687b      	ldr	r3, [r7, #4]
 8000582:	791b      	ldrb	r3, [r3, #4]
 8000584:	f003 0303 	and.w	r3, r3, #3
 8000588:	747b      	strb	r3, [r7, #17]
		SYSCFG_PCLK_EN();
 800058a:	4b5d      	ldr	r3, [pc, #372]	@ (8000700 <GPIO_Init+0x338>)
 800058c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800058e:	4a5c      	ldr	r2, [pc, #368]	@ (8000700 <GPIO_Init+0x338>)
 8000590:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000594:	6453      	str	r3, [r2, #68]	@ 0x44
		SYSCFG->EXTICR[temp1] |= (portcode << (4 * temp2));
 8000596:	4a5b      	ldr	r2, [pc, #364]	@ (8000704 <GPIO_Init+0x33c>)
 8000598:	7cbb      	ldrb	r3, [r7, #18]
 800059a:	3302      	adds	r3, #2
 800059c:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 80005a0:	7cf9      	ldrb	r1, [r7, #19]
 80005a2:	7c7b      	ldrb	r3, [r7, #17]
 80005a4:	009b      	lsls	r3, r3, #2
 80005a6:	fa01 f303 	lsl.w	r3, r1, r3
 80005aa:	4618      	mov	r0, r3
 80005ac:	4955      	ldr	r1, [pc, #340]	@ (8000704 <GPIO_Init+0x33c>)
 80005ae:	7cbb      	ldrb	r3, [r7, #18]
 80005b0:	4302      	orrs	r2, r0
 80005b2:	3302      	adds	r3, #2
 80005b4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
		//3. enable the exti interrupt delivery using IMR
		EXTI->IMR |=  1 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber;
 80005b8:	4b53      	ldr	r3, [pc, #332]	@ (8000708 <GPIO_Init+0x340>)
 80005ba:	681b      	ldr	r3, [r3, #0]
 80005bc:	687a      	ldr	r2, [r7, #4]
 80005be:	7912      	ldrb	r2, [r2, #4]
 80005c0:	4611      	mov	r1, r2
 80005c2:	2201      	movs	r2, #1
 80005c4:	408a      	lsls	r2, r1
 80005c6:	4611      	mov	r1, r2
 80005c8:	4a4f      	ldr	r2, [pc, #316]	@ (8000708 <GPIO_Init+0x340>)
 80005ca:	430b      	orrs	r3, r1
 80005cc:	6013      	str	r3, [r2, #0]
	}

	//2. configure the speed
	temp = (pGPIOHandle->GPIO_PinConfig.GPIO_PinSpeed << ( 2 * pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber) );
 80005ce:	687b      	ldr	r3, [r7, #4]
 80005d0:	799b      	ldrb	r3, [r3, #6]
 80005d2:	461a      	mov	r2, r3
 80005d4:	687b      	ldr	r3, [r7, #4]
 80005d6:	791b      	ldrb	r3, [r3, #4]
 80005d8:	005b      	lsls	r3, r3, #1
 80005da:	fa02 f303 	lsl.w	r3, r2, r3
 80005de:	617b      	str	r3, [r7, #20]
	pGPIOHandle->pGPIOx->OSPEEDR &= ~( 0x3 << ( 2 * pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber)); //clearing
 80005e0:	687b      	ldr	r3, [r7, #4]
 80005e2:	681b      	ldr	r3, [r3, #0]
 80005e4:	689a      	ldr	r2, [r3, #8]
 80005e6:	687b      	ldr	r3, [r7, #4]
 80005e8:	791b      	ldrb	r3, [r3, #4]
 80005ea:	005b      	lsls	r3, r3, #1
 80005ec:	2103      	movs	r1, #3
 80005ee:	fa01 f303 	lsl.w	r3, r1, r3
 80005f2:	43db      	mvns	r3, r3
 80005f4:	4619      	mov	r1, r3
 80005f6:	687b      	ldr	r3, [r7, #4]
 80005f8:	681b      	ldr	r3, [r3, #0]
 80005fa:	400a      	ands	r2, r1
 80005fc:	609a      	str	r2, [r3, #8]
	pGPIOHandle->pGPIOx->OSPEEDR |= temp;
 80005fe:	687b      	ldr	r3, [r7, #4]
 8000600:	681b      	ldr	r3, [r3, #0]
 8000602:	6899      	ldr	r1, [r3, #8]
 8000604:	687b      	ldr	r3, [r7, #4]
 8000606:	681b      	ldr	r3, [r3, #0]
 8000608:	697a      	ldr	r2, [r7, #20]
 800060a:	430a      	orrs	r2, r1
 800060c:	609a      	str	r2, [r3, #8]

	//3. configure the pupd settings
	temp = (pGPIOHandle->GPIO_PinConfig.GPIO_PinPuPdControl << ( 2 * pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber) );
 800060e:	687b      	ldr	r3, [r7, #4]
 8000610:	79db      	ldrb	r3, [r3, #7]
 8000612:	461a      	mov	r2, r3
 8000614:	687b      	ldr	r3, [r7, #4]
 8000616:	791b      	ldrb	r3, [r3, #4]
 8000618:	005b      	lsls	r3, r3, #1
 800061a:	fa02 f303 	lsl.w	r3, r2, r3
 800061e:	617b      	str	r3, [r7, #20]
	pGPIOHandle->pGPIOx->PUPDR &= ~( 0x3 << ( 2 * pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber)); //clearing
 8000620:	687b      	ldr	r3, [r7, #4]
 8000622:	681b      	ldr	r3, [r3, #0]
 8000624:	68da      	ldr	r2, [r3, #12]
 8000626:	687b      	ldr	r3, [r7, #4]
 8000628:	791b      	ldrb	r3, [r3, #4]
 800062a:	005b      	lsls	r3, r3, #1
 800062c:	2103      	movs	r1, #3
 800062e:	fa01 f303 	lsl.w	r3, r1, r3
 8000632:	43db      	mvns	r3, r3
 8000634:	4619      	mov	r1, r3
 8000636:	687b      	ldr	r3, [r7, #4]
 8000638:	681b      	ldr	r3, [r3, #0]
 800063a:	400a      	ands	r2, r1
 800063c:	60da      	str	r2, [r3, #12]
	pGPIOHandle->pGPIOx->PUPDR |= temp;
 800063e:	687b      	ldr	r3, [r7, #4]
 8000640:	681b      	ldr	r3, [r3, #0]
 8000642:	68d9      	ldr	r1, [r3, #12]
 8000644:	687b      	ldr	r3, [r7, #4]
 8000646:	681b      	ldr	r3, [r3, #0]
 8000648:	697a      	ldr	r2, [r7, #20]
 800064a:	430a      	orrs	r2, r1
 800064c:	60da      	str	r2, [r3, #12]


	//4. configure the optype
	temp = (pGPIOHandle->GPIO_PinConfig.GPIO_PinOPType << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber );
 800064e:	687b      	ldr	r3, [r7, #4]
 8000650:	7a1b      	ldrb	r3, [r3, #8]
 8000652:	461a      	mov	r2, r3
 8000654:	687b      	ldr	r3, [r7, #4]
 8000656:	791b      	ldrb	r3, [r3, #4]
 8000658:	fa02 f303 	lsl.w	r3, r2, r3
 800065c:	617b      	str	r3, [r7, #20]
	pGPIOHandle->pGPIOx->OTYPER &= ~( 0x1 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber); //clearing
 800065e:	687b      	ldr	r3, [r7, #4]
 8000660:	681b      	ldr	r3, [r3, #0]
 8000662:	685a      	ldr	r2, [r3, #4]
 8000664:	687b      	ldr	r3, [r7, #4]
 8000666:	791b      	ldrb	r3, [r3, #4]
 8000668:	4619      	mov	r1, r3
 800066a:	2301      	movs	r3, #1
 800066c:	408b      	lsls	r3, r1
 800066e:	43db      	mvns	r3, r3
 8000670:	4619      	mov	r1, r3
 8000672:	687b      	ldr	r3, [r7, #4]
 8000674:	681b      	ldr	r3, [r3, #0]
 8000676:	400a      	ands	r2, r1
 8000678:	605a      	str	r2, [r3, #4]
	pGPIOHandle->pGPIOx->OTYPER |= temp;
 800067a:	687b      	ldr	r3, [r7, #4]
 800067c:	681b      	ldr	r3, [r3, #0]
 800067e:	6859      	ldr	r1, [r3, #4]
 8000680:	687b      	ldr	r3, [r7, #4]
 8000682:	681b      	ldr	r3, [r3, #0]
 8000684:	697a      	ldr	r2, [r7, #20]
 8000686:	430a      	orrs	r2, r1
 8000688:	605a      	str	r2, [r3, #4]

	//5. configure the alt functionality
	if(pGPIOHandle->GPIO_PinConfig.GPIO_PinMode == GPIO_MODE_ALTFN)
 800068a:	687b      	ldr	r3, [r7, #4]
 800068c:	795b      	ldrb	r3, [r3, #5]
 800068e:	2b02      	cmp	r3, #2
 8000690:	d131      	bne.n	80006f6 <GPIO_Init+0x32e>
	{
		//configure the alt function registers.
		uint8_t temp1, temp2;

		temp1 = pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber / 8;
 8000692:	687b      	ldr	r3, [r7, #4]
 8000694:	791b      	ldrb	r3, [r3, #4]
 8000696:	08db      	lsrs	r3, r3, #3
 8000698:	743b      	strb	r3, [r7, #16]
		temp2 = pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber  % 8;
 800069a:	687b      	ldr	r3, [r7, #4]
 800069c:	791b      	ldrb	r3, [r3, #4]
 800069e:	f003 0307 	and.w	r3, r3, #7
 80006a2:	73fb      	strb	r3, [r7, #15]
		pGPIOHandle->pGPIOx->AF[temp1] &= ~(0xF << ( 4 * temp2 ) ); //clearing
 80006a4:	687b      	ldr	r3, [r7, #4]
 80006a6:	681b      	ldr	r3, [r3, #0]
 80006a8:	7c3a      	ldrb	r2, [r7, #16]
 80006aa:	3208      	adds	r2, #8
 80006ac:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 80006b0:	7bfb      	ldrb	r3, [r7, #15]
 80006b2:	009b      	lsls	r3, r3, #2
 80006b4:	220f      	movs	r2, #15
 80006b6:	fa02 f303 	lsl.w	r3, r2, r3
 80006ba:	43db      	mvns	r3, r3
 80006bc:	4618      	mov	r0, r3
 80006be:	687b      	ldr	r3, [r7, #4]
 80006c0:	681b      	ldr	r3, [r3, #0]
 80006c2:	7c3a      	ldrb	r2, [r7, #16]
 80006c4:	4001      	ands	r1, r0
 80006c6:	3208      	adds	r2, #8
 80006c8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
		pGPIOHandle->pGPIOx->AF[temp1] |= (pGPIOHandle->GPIO_PinConfig.GPIO_PinAltFunMode << ( 4 * temp2 ) );
 80006cc:	687b      	ldr	r3, [r7, #4]
 80006ce:	681b      	ldr	r3, [r3, #0]
 80006d0:	7c3a      	ldrb	r2, [r7, #16]
 80006d2:	3208      	adds	r2, #8
 80006d4:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 80006d8:	687b      	ldr	r3, [r7, #4]
 80006da:	7a5b      	ldrb	r3, [r3, #9]
 80006dc:	461a      	mov	r2, r3
 80006de:	7bfb      	ldrb	r3, [r7, #15]
 80006e0:	009b      	lsls	r3, r3, #2
 80006e2:	fa02 f303 	lsl.w	r3, r2, r3
 80006e6:	4618      	mov	r0, r3
 80006e8:	687b      	ldr	r3, [r7, #4]
 80006ea:	681b      	ldr	r3, [r3, #0]
 80006ec:	7c3a      	ldrb	r2, [r7, #16]
 80006ee:	4301      	orrs	r1, r0
 80006f0:	3208      	adds	r2, #8
 80006f2:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
	}

}
 80006f6:	bf00      	nop
 80006f8:	3718      	adds	r7, #24
 80006fa:	46bd      	mov	sp, r7
 80006fc:	bd80      	pop	{r7, pc}
 80006fe:	bf00      	nop
 8000700:	80043800 	.word	0x80043800
 8000704:	80023800 	.word	0x80023800
 8000708:	80023c00 	.word	0x80023c00

0800070c <I2C_PeriClockControl>:
	SlaveAddr |= 1;
	pI2Cx->I2C_DR = SlaveAddr;
}

void I2C_PeriClockControl(I2C_RegDef_t *pI2Cx, uint8_t EnorDi)
{
 800070c:	b480      	push	{r7}
 800070e:	b083      	sub	sp, #12
 8000710:	af00      	add	r7, sp, #0
 8000712:	6078      	str	r0, [r7, #4]
 8000714:	460b      	mov	r3, r1
 8000716:	70fb      	strb	r3, [r7, #3]
	if(EnorDi == ENABLE)
 8000718:	78fb      	ldrb	r3, [r7, #3]
 800071a:	2b01      	cmp	r3, #1
 800071c:	d120      	bne.n	8000760 <I2C_PeriClockControl+0x54>
	{
		if(pI2Cx == I2C1)
 800071e:	687b      	ldr	r3, [r7, #4]
 8000720:	4a22      	ldr	r2, [pc, #136]	@ (80007ac <I2C_PeriClockControl+0xa0>)
 8000722:	4293      	cmp	r3, r2
 8000724:	d106      	bne.n	8000734 <I2C_PeriClockControl+0x28>
		{
			I2C1_PCLK_EN();
 8000726:	4b22      	ldr	r3, [pc, #136]	@ (80007b0 <I2C_PeriClockControl+0xa4>)
 8000728:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800072a:	4a21      	ldr	r2, [pc, #132]	@ (80007b0 <I2C_PeriClockControl+0xa4>)
 800072c:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8000730:	6413      	str	r3, [r2, #64]	@ 0x40
		else if (pI2Cx == I2C3)
		{
			I2C3_PCLK_DI();
		}
	}
}
 8000732:	e035      	b.n	80007a0 <I2C_PeriClockControl+0x94>
		else if (pI2Cx == I2C2)
 8000734:	687b      	ldr	r3, [r7, #4]
 8000736:	4a1f      	ldr	r2, [pc, #124]	@ (80007b4 <I2C_PeriClockControl+0xa8>)
 8000738:	4293      	cmp	r3, r2
 800073a:	d106      	bne.n	800074a <I2C_PeriClockControl+0x3e>
			I2C2_PCLK_EN();
 800073c:	4b1c      	ldr	r3, [pc, #112]	@ (80007b0 <I2C_PeriClockControl+0xa4>)
 800073e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000740:	4a1b      	ldr	r2, [pc, #108]	@ (80007b0 <I2C_PeriClockControl+0xa4>)
 8000742:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8000746:	6413      	str	r3, [r2, #64]	@ 0x40
}
 8000748:	e02a      	b.n	80007a0 <I2C_PeriClockControl+0x94>
		else if (pI2Cx == I2C3)
 800074a:	687b      	ldr	r3, [r7, #4]
 800074c:	4a1a      	ldr	r2, [pc, #104]	@ (80007b8 <I2C_PeriClockControl+0xac>)
 800074e:	4293      	cmp	r3, r2
 8000750:	d126      	bne.n	80007a0 <I2C_PeriClockControl+0x94>
			I2C3_PCLK_EN();
 8000752:	4b17      	ldr	r3, [pc, #92]	@ (80007b0 <I2C_PeriClockControl+0xa4>)
 8000754:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000756:	4a16      	ldr	r2, [pc, #88]	@ (80007b0 <I2C_PeriClockControl+0xa4>)
 8000758:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 800075c:	6413      	str	r3, [r2, #64]	@ 0x40
}
 800075e:	e01f      	b.n	80007a0 <I2C_PeriClockControl+0x94>
		if(pI2Cx == I2C1)
 8000760:	687b      	ldr	r3, [r7, #4]
 8000762:	4a12      	ldr	r2, [pc, #72]	@ (80007ac <I2C_PeriClockControl+0xa0>)
 8000764:	4293      	cmp	r3, r2
 8000766:	d106      	bne.n	8000776 <I2C_PeriClockControl+0x6a>
			I2C1_PCLK_DI();
 8000768:	4b11      	ldr	r3, [pc, #68]	@ (80007b0 <I2C_PeriClockControl+0xa4>)
 800076a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800076c:	4a10      	ldr	r2, [pc, #64]	@ (80007b0 <I2C_PeriClockControl+0xa4>)
 800076e:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8000772:	6413      	str	r3, [r2, #64]	@ 0x40
}
 8000774:	e014      	b.n	80007a0 <I2C_PeriClockControl+0x94>
		else if (pI2Cx == I2C2)
 8000776:	687b      	ldr	r3, [r7, #4]
 8000778:	4a0e      	ldr	r2, [pc, #56]	@ (80007b4 <I2C_PeriClockControl+0xa8>)
 800077a:	4293      	cmp	r3, r2
 800077c:	d106      	bne.n	800078c <I2C_PeriClockControl+0x80>
			I2C2_PCLK_DI();
 800077e:	4b0c      	ldr	r3, [pc, #48]	@ (80007b0 <I2C_PeriClockControl+0xa4>)
 8000780:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000782:	4a0b      	ldr	r2, [pc, #44]	@ (80007b0 <I2C_PeriClockControl+0xa4>)
 8000784:	f423 0380 	bic.w	r3, r3, #4194304	@ 0x400000
 8000788:	6413      	str	r3, [r2, #64]	@ 0x40
}
 800078a:	e009      	b.n	80007a0 <I2C_PeriClockControl+0x94>
		else if (pI2Cx == I2C3)
 800078c:	687b      	ldr	r3, [r7, #4]
 800078e:	4a0a      	ldr	r2, [pc, #40]	@ (80007b8 <I2C_PeriClockControl+0xac>)
 8000790:	4293      	cmp	r3, r2
 8000792:	d105      	bne.n	80007a0 <I2C_PeriClockControl+0x94>
			I2C3_PCLK_DI();
 8000794:	4b06      	ldr	r3, [pc, #24]	@ (80007b0 <I2C_PeriClockControl+0xa4>)
 8000796:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000798:	4a05      	ldr	r2, [pc, #20]	@ (80007b0 <I2C_PeriClockControl+0xa4>)
 800079a:	f423 0300 	bic.w	r3, r3, #8388608	@ 0x800000
 800079e:	6413      	str	r3, [r2, #64]	@ 0x40
}
 80007a0:	bf00      	nop
 80007a2:	370c      	adds	r7, #12
 80007a4:	46bd      	mov	sp, r7
 80007a6:	bc80      	pop	{r7}
 80007a8:	4770      	bx	lr
 80007aa:	bf00      	nop
 80007ac:	80005400 	.word	0x80005400
 80007b0:	80043800 	.word	0x80043800
 80007b4:	80005800 	.word	0x80005800
 80007b8:	80005c00 	.word	0x80005c00

080007bc <I2C_PeripheralControl>:

void I2C_PeripheralControl(I2C_RegDef_t *pI2Cx, uint8_t EnOrDi)
{
 80007bc:	b480      	push	{r7}
 80007be:	b083      	sub	sp, #12
 80007c0:	af00      	add	r7, sp, #0
 80007c2:	6078      	str	r0, [r7, #4]
 80007c4:	460b      	mov	r3, r1
 80007c6:	70fb      	strb	r3, [r7, #3]
	if(EnOrDi == DISABLE)
 80007c8:	78fb      	ldrb	r3, [r7, #3]
 80007ca:	2b00      	cmp	r3, #0
 80007cc:	d106      	bne.n	80007dc <I2C_PeripheralControl+0x20>
	{
		pI2Cx->I2C_CR1 |= ( 1 << I2C_CR1_PE );
 80007ce:	687b      	ldr	r3, [r7, #4]
 80007d0:	681b      	ldr	r3, [r3, #0]
 80007d2:	f043 0201 	orr.w	r2, r3, #1
 80007d6:	687b      	ldr	r3, [r7, #4]
 80007d8:	601a      	str	r2, [r3, #0]
	}
	else
	{
		pI2Cx -> I2C_CR1 &= ~( 1 << I2C_CR1_PE);
	}
}
 80007da:	e005      	b.n	80007e8 <I2C_PeripheralControl+0x2c>
		pI2Cx -> I2C_CR1 &= ~( 1 << I2C_CR1_PE);
 80007dc:	687b      	ldr	r3, [r7, #4]
 80007de:	681b      	ldr	r3, [r3, #0]
 80007e0:	f023 0201 	bic.w	r2, r3, #1
 80007e4:	687b      	ldr	r3, [r7, #4]
 80007e6:	601a      	str	r2, [r3, #0]
}
 80007e8:	bf00      	nop
 80007ea:	370c      	adds	r7, #12
 80007ec:	46bd      	mov	sp, r7
 80007ee:	bc80      	pop	{r7}
 80007f0:	4770      	bx	lr
	...

080007f4 <I2C_Init>:
	*(NVIC_PR_BASE_ADDR + ( 4 * iprx )) |= ( IRQPriority << shift_amount);

}

void I2C_Init(I2C_Handle_t *pI2CHandle)
{
 80007f4:	b580      	push	{r7, lr}
 80007f6:	b084      	sub	sp, #16
 80007f8:	af00      	add	r7, sp, #0
 80007fa:	6078      	str	r0, [r7, #4]
	uint32_t tempreg = 0;
 80007fc:	2300      	movs	r3, #0
 80007fe:	60fb      	str	r3, [r7, #12]
	//peripheral clock enable
	I2C_PeriClockControl(pI2CHandle->pI2Cx, ENABLE);
 8000800:	687b      	ldr	r3, [r7, #4]
 8000802:	681b      	ldr	r3, [r3, #0]
 8000804:	2101      	movs	r1, #1
 8000806:	4618      	mov	r0, r3
 8000808:	f7ff ff80 	bl	800070c <I2C_PeriClockControl>

	//  Configuration the ACK control
	tempreg |= (pI2CHandle->I2C_Config.I2C_ACKControl << 10);
 800080c:	687b      	ldr	r3, [r7, #4]
 800080e:	7a5b      	ldrb	r3, [r3, #9]
 8000810:	029b      	lsls	r3, r3, #10
 8000812:	68fa      	ldr	r2, [r7, #12]
 8000814:	4313      	orrs	r3, r2
 8000816:	60fb      	str	r3, [r7, #12]
	pI2CHandle->pI2Cx->I2C_CR1 = tempreg;
 8000818:	687b      	ldr	r3, [r7, #4]
 800081a:	681b      	ldr	r3, [r3, #0]
 800081c:	68fa      	ldr	r2, [r7, #12]
 800081e:	601a      	str	r2, [r3, #0]
	tempreg = 0;
 8000820:	2300      	movs	r3, #0
 8000822:	60fb      	str	r3, [r7, #12]

	// Configuration the Freq field
	tempreg = RCC_GetPCLK1Value() / 1000000U;
 8000824:	f000 f894 	bl	8000950 <RCC_GetPCLK1Value>
 8000828:	4603      	mov	r3, r0
 800082a:	4a39      	ldr	r2, [pc, #228]	@ (8000910 <I2C_Init+0x11c>)
 800082c:	fba2 2303 	umull	r2, r3, r2, r3
 8000830:	0c9b      	lsrs	r3, r3, #18
 8000832:	60fb      	str	r3, [r7, #12]
	pI2CHandle->pI2Cx->I2C_CR2 = (tempreg & 0x3F);
 8000834:	687b      	ldr	r3, [r7, #4]
 8000836:	681b      	ldr	r3, [r3, #0]
 8000838:	68fa      	ldr	r2, [r7, #12]
 800083a:	f002 023f 	and.w	r2, r2, #63	@ 0x3f
 800083e:	605a      	str	r2, [r3, #4]

	// Configuration the Device Address
	tempreg = 0;
 8000840:	2300      	movs	r3, #0
 8000842:	60fb      	str	r3, [r7, #12]
	tempreg |= pI2CHandle->I2C_Config.I2C_DeviceAddress << 1;
 8000844:	687b      	ldr	r3, [r7, #4]
 8000846:	7a1b      	ldrb	r3, [r3, #8]
 8000848:	005b      	lsls	r3, r3, #1
 800084a:	68fa      	ldr	r2, [r7, #12]
 800084c:	4313      	orrs	r3, r2
 800084e:	60fb      	str	r3, [r7, #12]
	tempreg |= (1 << 14);
 8000850:	68fb      	ldr	r3, [r7, #12]
 8000852:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000856:	60fb      	str	r3, [r7, #12]
	pI2CHandle->pI2Cx->I2C_OAR1 = tempreg;
 8000858:	687b      	ldr	r3, [r7, #4]
 800085a:	681b      	ldr	r3, [r3, #0]
 800085c:	68fa      	ldr	r2, [r7, #12]
 800085e:	609a      	str	r2, [r3, #8]

	// CCR Calculations
	uint16_t ccr_value = 0;
 8000860:	2300      	movs	r3, #0
 8000862:	817b      	strh	r3, [r7, #10]
	tempreg = 0;
 8000864:	2300      	movs	r3, #0
 8000866:	60fb      	str	r3, [r7, #12]
	if(pI2CHandle->I2C_Config.I2C_SCLSpeed <= I2C_SCL_SPEED_SM)
 8000868:	687b      	ldr	r3, [r7, #4]
 800086a:	685b      	ldr	r3, [r3, #4]
 800086c:	4a29      	ldr	r2, [pc, #164]	@ (8000914 <I2C_Init+0x120>)
 800086e:	4293      	cmp	r3, r2
 8000870:	d80f      	bhi.n	8000892 <I2C_Init+0x9e>
	{
		ccr_value = RCC_GetPCLK1Value() / ( 2 * pI2CHandle->I2C_Config.I2C_SCLSpeed);
 8000872:	f000 f86d 	bl	8000950 <RCC_GetPCLK1Value>
 8000876:	4602      	mov	r2, r0
 8000878:	687b      	ldr	r3, [r7, #4]
 800087a:	685b      	ldr	r3, [r3, #4]
 800087c:	005b      	lsls	r3, r3, #1
 800087e:	fbb2 f3f3 	udiv	r3, r2, r3
 8000882:	817b      	strh	r3, [r7, #10]
		tempreg |= (ccr_value & 0xFFF);
 8000884:	897b      	ldrh	r3, [r7, #10]
 8000886:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800088a:	68fa      	ldr	r2, [r7, #12]
 800088c:	4313      	orrs	r3, r2
 800088e:	60fb      	str	r3, [r7, #12]
 8000890:	e036      	b.n	8000900 <I2C_Init+0x10c>
	}
	else
	{
		tempreg |= ( 1 << 15);
 8000892:	68fb      	ldr	r3, [r7, #12]
 8000894:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8000898:	60fb      	str	r3, [r7, #12]
		tempreg |= (pI2CHandle->I2C_Config.I2C_FMDutyCycle << 14);
 800089a:	687b      	ldr	r3, [r7, #4]
 800089c:	7a9b      	ldrb	r3, [r3, #10]
 800089e:	039b      	lsls	r3, r3, #14
 80008a0:	68fa      	ldr	r2, [r7, #12]
 80008a2:	4313      	orrs	r3, r2
 80008a4:	60fb      	str	r3, [r7, #12]
		if (pI2CHandle->I2C_Config.I2C_FMDutyCycle == I2C_FM_DUTY_2)
 80008a6:	687b      	ldr	r3, [r7, #4]
 80008a8:	7a9b      	ldrb	r3, [r3, #10]
 80008aa:	2b00      	cmp	r3, #0
 80008ac:	d111      	bne.n	80008d2 <I2C_Init+0xde>
		{
			ccr_value = RCC_GetPCLK1Value() / ( 3 * pI2CHandle->I2C_Config.I2C_SCLSpeed);
 80008ae:	f000 f84f 	bl	8000950 <RCC_GetPCLK1Value>
 80008b2:	4601      	mov	r1, r0
 80008b4:	687b      	ldr	r3, [r7, #4]
 80008b6:	685a      	ldr	r2, [r3, #4]
 80008b8:	4613      	mov	r3, r2
 80008ba:	005b      	lsls	r3, r3, #1
 80008bc:	4413      	add	r3, r2
 80008be:	fbb1 f3f3 	udiv	r3, r1, r3
 80008c2:	817b      	strh	r3, [r7, #10]
			tempreg |= (ccr_value & 0xFFF);
 80008c4:	897b      	ldrh	r3, [r7, #10]
 80008c6:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80008ca:	68fa      	ldr	r2, [r7, #12]
 80008cc:	4313      	orrs	r3, r2
 80008ce:	60fb      	str	r3, [r7, #12]
 80008d0:	e016      	b.n	8000900 <I2C_Init+0x10c>
		}
		else if (pI2CHandle->I2C_Config.I2C_FMDutyCycle == I2C_FM_DUTY_16_9)
 80008d2:	687b      	ldr	r3, [r7, #4]
 80008d4:	7a9b      	ldrb	r3, [r3, #10]
 80008d6:	2b01      	cmp	r3, #1
 80008d8:	d112      	bne.n	8000900 <I2C_Init+0x10c>
		{
			ccr_value = RCC_GetPCLK1Value() / ( 25 * pI2CHandle->I2C_Config.I2C_SCLSpeed);
 80008da:	f000 f839 	bl	8000950 <RCC_GetPCLK1Value>
 80008de:	4601      	mov	r1, r0
 80008e0:	687b      	ldr	r3, [r7, #4]
 80008e2:	685a      	ldr	r2, [r3, #4]
 80008e4:	4613      	mov	r3, r2
 80008e6:	009b      	lsls	r3, r3, #2
 80008e8:	4413      	add	r3, r2
 80008ea:	009a      	lsls	r2, r3, #2
 80008ec:	4413      	add	r3, r2
 80008ee:	fbb1 f3f3 	udiv	r3, r1, r3
 80008f2:	817b      	strh	r3, [r7, #10]
			tempreg |= (ccr_value & 0xFFF);
 80008f4:	897b      	ldrh	r3, [r7, #10]
 80008f6:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80008fa:	68fa      	ldr	r2, [r7, #12]
 80008fc:	4313      	orrs	r3, r2
 80008fe:	60fb      	str	r3, [r7, #12]
		}
	}
	pI2CHandle->pI2Cx->I2C_CCR = tempreg;
 8000900:	687b      	ldr	r3, [r7, #4]
 8000902:	681b      	ldr	r3, [r3, #0]
 8000904:	68fa      	ldr	r2, [r7, #12]
 8000906:	61da      	str	r2, [r3, #28]
}
 8000908:	bf00      	nop
 800090a:	3710      	adds	r7, #16
 800090c:	46bd      	mov	sp, r7
 800090e:	bd80      	pop	{r7, pc}
 8000910:	431bde83 	.word	0x431bde83
 8000914:	000186a0 	.word	0x000186a0

08000918 <I2C_ManageAcking>:
	if (Sr == I2C_DISABLE_SR)
		I2C_GenerateStopCondition(pI2CHandle->pI2Cx);
}

void I2C_ManageAcking(I2C_RegDef_t *pI2Cx, uint8_t EnorDi)
{
 8000918:	b480      	push	{r7}
 800091a:	b083      	sub	sp, #12
 800091c:	af00      	add	r7, sp, #0
 800091e:	6078      	str	r0, [r7, #4]
 8000920:	460b      	mov	r3, r1
 8000922:	70fb      	strb	r3, [r7, #3]
	if(EnorDi == I2C_ACK_ENABLE)
 8000924:	78fb      	ldrb	r3, [r7, #3]
 8000926:	2b01      	cmp	r3, #1
 8000928:	d106      	bne.n	8000938 <I2C_ManageAcking+0x20>
	{
		//enable the ack
		pI2Cx->I2C_CR1 |= ( 1 << I2C_CR1_ACK);
 800092a:	687b      	ldr	r3, [r7, #4]
 800092c:	681b      	ldr	r3, [r3, #0]
 800092e:	f443 6280 	orr.w	r2, r3, #1024	@ 0x400
 8000932:	687b      	ldr	r3, [r7, #4]
 8000934:	601a      	str	r2, [r3, #0]
	}else
	{
		//disable the ack
		pI2Cx->I2C_CR1 &= ~( 1 << I2C_CR1_ACK);
	}
}
 8000936:	e005      	b.n	8000944 <I2C_ManageAcking+0x2c>
		pI2Cx->I2C_CR1 &= ~( 1 << I2C_CR1_ACK);
 8000938:	687b      	ldr	r3, [r7, #4]
 800093a:	681b      	ldr	r3, [r3, #0]
 800093c:	f423 6280 	bic.w	r2, r3, #1024	@ 0x400
 8000940:	687b      	ldr	r3, [r7, #4]
 8000942:	601a      	str	r2, [r3, #0]
}
 8000944:	bf00      	nop
 8000946:	370c      	adds	r7, #12
 8000948:	46bd      	mov	sp, r7
 800094a:	bc80      	pop	{r7}
 800094c:	4770      	bx	lr
	...

08000950 <RCC_GetPCLK1Value>:

uint16_t AHB_Prescaler[8] = {2,4,8,16,64,128,256,512};
uint16_t APB_Prescaler[4] = {2,4,8,16};

uint32_t RCC_GetPCLK1Value (void)
{
 8000950:	b580      	push	{r7, lr}
 8000952:	b084      	sub	sp, #16
 8000954:	af00      	add	r7, sp, #0
	uint32_t pclk1, SystemClock;

	uint8_t clksrc, ahbp, temp,abp1;

	clksrc = ((RCC->CFGR >> 2) & 0x3);
 8000956:	4b24      	ldr	r3, [pc, #144]	@ (80009e8 <RCC_GetPCLK1Value+0x98>)
 8000958:	689b      	ldr	r3, [r3, #8]
 800095a:	089b      	lsrs	r3, r3, #2
 800095c:	b2db      	uxtb	r3, r3
 800095e:	f003 0303 	and.w	r3, r3, #3
 8000962:	727b      	strb	r3, [r7, #9]

	if (clksrc == 0)
 8000964:	7a7b      	ldrb	r3, [r7, #9]
 8000966:	2b00      	cmp	r3, #0
 8000968:	d102      	bne.n	8000970 <RCC_GetPCLK1Value+0x20>
	{
		SystemClock = 16000000;
 800096a:	4b20      	ldr	r3, [pc, #128]	@ (80009ec <RCC_GetPCLK1Value+0x9c>)
 800096c:	60fb      	str	r3, [r7, #12]
 800096e:	e008      	b.n	8000982 <RCC_GetPCLK1Value+0x32>
	}
	else if (clksrc == 1)
 8000970:	7a7b      	ldrb	r3, [r7, #9]
 8000972:	2b01      	cmp	r3, #1
 8000974:	d102      	bne.n	800097c <RCC_GetPCLK1Value+0x2c>
	{
		SystemClock = 8000000;
 8000976:	4b1e      	ldr	r3, [pc, #120]	@ (80009f0 <RCC_GetPCLK1Value+0xa0>)
 8000978:	60fb      	str	r3, [r7, #12]
 800097a:	e002      	b.n	8000982 <RCC_GetPCLK1Value+0x32>
	}
	else
	{
		SystemClock = RCC_GetPLLOutputClock();
 800097c:	f000 f83e 	bl	80009fc <RCC_GetPLLOutputClock>
 8000980:	60f8      	str	r0, [r7, #12]
	}

	temp = ((RCC->CFGR >> 4) & 0xF);
 8000982:	4b19      	ldr	r3, [pc, #100]	@ (80009e8 <RCC_GetPCLK1Value+0x98>)
 8000984:	689b      	ldr	r3, [r3, #8]
 8000986:	091b      	lsrs	r3, r3, #4
 8000988:	b2db      	uxtb	r3, r3
 800098a:	f003 030f 	and.w	r3, r3, #15
 800098e:	723b      	strb	r3, [r7, #8]

	if (temp < 8)
 8000990:	7a3b      	ldrb	r3, [r7, #8]
 8000992:	2b07      	cmp	r3, #7
 8000994:	d802      	bhi.n	800099c <RCC_GetPCLK1Value+0x4c>
	{
		ahbp = 1;
 8000996:	2301      	movs	r3, #1
 8000998:	72fb      	strb	r3, [r7, #11]
 800099a:	e005      	b.n	80009a8 <RCC_GetPCLK1Value+0x58>
	}
	else
	{
		ahbp = AHB_Prescaler[temp - 8];
 800099c:	7a3b      	ldrb	r3, [r7, #8]
 800099e:	3b08      	subs	r3, #8
 80009a0:	4a14      	ldr	r2, [pc, #80]	@ (80009f4 <RCC_GetPCLK1Value+0xa4>)
 80009a2:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80009a6:	72fb      	strb	r3, [r7, #11]
	}

	temp = ((RCC->CFGR >> 10) & 0x7);
 80009a8:	4b0f      	ldr	r3, [pc, #60]	@ (80009e8 <RCC_GetPCLK1Value+0x98>)
 80009aa:	689b      	ldr	r3, [r3, #8]
 80009ac:	0a9b      	lsrs	r3, r3, #10
 80009ae:	b2db      	uxtb	r3, r3
 80009b0:	f003 0307 	and.w	r3, r3, #7
 80009b4:	723b      	strb	r3, [r7, #8]

	if (temp < 4)
 80009b6:	7a3b      	ldrb	r3, [r7, #8]
 80009b8:	2b03      	cmp	r3, #3
 80009ba:	d802      	bhi.n	80009c2 <RCC_GetPCLK1Value+0x72>
	{
		abp1 = 1;
 80009bc:	2301      	movs	r3, #1
 80009be:	72bb      	strb	r3, [r7, #10]
 80009c0:	e005      	b.n	80009ce <RCC_GetPCLK1Value+0x7e>
	}
	else
	{
		abp1 = APB_Prescaler[temp - 4];
 80009c2:	7a3b      	ldrb	r3, [r7, #8]
 80009c4:	3b04      	subs	r3, #4
 80009c6:	4a0c      	ldr	r2, [pc, #48]	@ (80009f8 <RCC_GetPCLK1Value+0xa8>)
 80009c8:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80009cc:	72bb      	strb	r3, [r7, #10]
	}

	pclk1 = ((SystemClock / ahbp) / abp1);
 80009ce:	7afb      	ldrb	r3, [r7, #11]
 80009d0:	68fa      	ldr	r2, [r7, #12]
 80009d2:	fbb2 f2f3 	udiv	r2, r2, r3
 80009d6:	7abb      	ldrb	r3, [r7, #10]
 80009d8:	fbb2 f3f3 	udiv	r3, r2, r3
 80009dc:	607b      	str	r3, [r7, #4]

	return pclk1;
 80009de:	687b      	ldr	r3, [r7, #4]
}
 80009e0:	4618      	mov	r0, r3
 80009e2:	3710      	adds	r7, #16
 80009e4:	46bd      	mov	sp, r7
 80009e6:	bd80      	pop	{r7, pc}
 80009e8:	80043800 	.word	0x80043800
 80009ec:	00f42400 	.word	0x00f42400
 80009f0:	007a1200 	.word	0x007a1200
 80009f4:	20000000 	.word	0x20000000
 80009f8:	20000010 	.word	0x20000010

080009fc <RCC_GetPLLOutputClock>:

	return pclk2;
}

uint32_t RCC_GetPLLOutputClock()
{
 80009fc:	b480      	push	{r7}
 80009fe:	af00      	add	r7, sp, #0
	return 0;
 8000a00:	2300      	movs	r3, #0
}
 8000a02:	4618      	mov	r0, r3
 8000a04:	46bd      	mov	sp, r7
 8000a06:	bc80      	pop	{r7}
 8000a08:	4770      	bx	lr
	...

08000a0c <__libc_init_array>:
 8000a0c:	b570      	push	{r4, r5, r6, lr}
 8000a0e:	4d0d      	ldr	r5, [pc, #52]	@ (8000a44 <__libc_init_array+0x38>)
 8000a10:	4c0d      	ldr	r4, [pc, #52]	@ (8000a48 <__libc_init_array+0x3c>)
 8000a12:	1b64      	subs	r4, r4, r5
 8000a14:	10a4      	asrs	r4, r4, #2
 8000a16:	2600      	movs	r6, #0
 8000a18:	42a6      	cmp	r6, r4
 8000a1a:	d109      	bne.n	8000a30 <__libc_init_array+0x24>
 8000a1c:	4d0b      	ldr	r5, [pc, #44]	@ (8000a4c <__libc_init_array+0x40>)
 8000a1e:	4c0c      	ldr	r4, [pc, #48]	@ (8000a50 <__libc_init_array+0x44>)
 8000a20:	f000 f818 	bl	8000a54 <_init>
 8000a24:	1b64      	subs	r4, r4, r5
 8000a26:	10a4      	asrs	r4, r4, #2
 8000a28:	2600      	movs	r6, #0
 8000a2a:	42a6      	cmp	r6, r4
 8000a2c:	d105      	bne.n	8000a3a <__libc_init_array+0x2e>
 8000a2e:	bd70      	pop	{r4, r5, r6, pc}
 8000a30:	f855 3b04 	ldr.w	r3, [r5], #4
 8000a34:	4798      	blx	r3
 8000a36:	3601      	adds	r6, #1
 8000a38:	e7ee      	b.n	8000a18 <__libc_init_array+0xc>
 8000a3a:	f855 3b04 	ldr.w	r3, [r5], #4
 8000a3e:	4798      	blx	r3
 8000a40:	3601      	adds	r6, #1
 8000a42:	e7f2      	b.n	8000a2a <__libc_init_array+0x1e>
 8000a44:	08000a6c 	.word	0x08000a6c
 8000a48:	08000a6c 	.word	0x08000a6c
 8000a4c:	08000a6c 	.word	0x08000a6c
 8000a50:	08000a70 	.word	0x08000a70

08000a54 <_init>:
 8000a54:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000a56:	bf00      	nop
 8000a58:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000a5a:	bc08      	pop	{r3}
 8000a5c:	469e      	mov	lr, r3
 8000a5e:	4770      	bx	lr

08000a60 <_fini>:
 8000a60:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000a62:	bf00      	nop
 8000a64:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000a66:	bc08      	pop	{r3}
 8000a68:	469e      	mov	lr, r3
 8000a6a:	4770      	bx	lr
